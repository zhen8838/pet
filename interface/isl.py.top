from ctypes import *
import platform
from enum import IntEnum

class format(IntEnum):
  ISL = 0
  POLYLIB = 1
  POLYLIB_CONSTRAINTS = 2
  OMEGA = 3
  C = 4
  LATEX = 5
  EXT_POLYLIB = 6

class yaml_style(IntEnum):
  BLOCK = 0
  FLOW = 1

class dim_type(IntEnum):
	CST = 0
	PARAM = 1
	IN = 2
	OUT = 3
	SET = 3
	DIV = 4
	ALL = 5

def get_lib_ext():
  if platform.system() == 'Windows':
      lib_ext = '.dll' 
  elif platform.system() == 'Linux':
      lib_ext = '.so'
  elif platform.system() == 'Darwin':
      lib_ext = '.dylib'
  else:
      lib_ext = ''
  return lib_ext

isl = cdll.LoadLibrary("libpet" + get_lib_ext())
libc = cdll.LoadLibrary("libc" + get_lib_ext())

class Error(Exception):
    pass

class Context:
    defaultInstance = None

    def __init__(self):
        ptr = isl.isl_ctx_alloc_with_pet_options()
        self.ptr = ptr

    def __del__(self):
        isl.isl_ctx_free(self)

    def from_param(self):
        return c_void_p(self.ptr)

    @staticmethod
    def getDefaultInstance():
        if Context.defaultInstance == None:
            Context.defaultInstance = Context()
        return Context.defaultInstance

    @CFUNCTYPE(None, py_object)
    def free_user(user):
        pythonapi.Py_DecRef(py_object(user))

isl.isl_ctx_alloc_with_pet_options.restype = c_void_p
isl.isl_ctx_free.argtypes = [Context]
